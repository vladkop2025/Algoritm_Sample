using System;

class BubbleSortExample
{
    // Метод пузырьковой сортировки
    //Прост в реализации, но неэффективен для больших массивов.Используется в учебных целях или для небольших наборов данных.
    public static void BubbleSort(int[] array)
    {
        int n = array.Length;
        for (int i = 0; i < n - 1; i++)
        {
            // Проходим по массиву и сравниваем соседние элементы
            for (int j = 0; j < n - i - 1; j++)
            {
                if (array[j] > array[j + 1])
                {
                    // Меняем элементы местами, если они в неправильном порядке
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }

    static void Main()
    {
        int[] array = { 64, 34, 25, 12, 22, 11, 90 };

        Console.WriteLine("Несортированный массив:");
        Console.WriteLine(string.Join(", ", array));

        BubbleSort(array);

        Console.WriteLine("\nОтсортированный массив:");
        Console.WriteLine(string.Join(", ", array));
    }
}

    //Принцип работы:

//Алгоритм последовательно сравнивает пары соседних элементов и меняет их местами, если они расположены в неправильном порядке.

//После каждого прохода наибольший (или наименьший, в зависимости от направления сортировки) элемент "всплывает" в конец массива.

    //Сложность:

//Худший случай: O(n²)(если массив отсортирован в обратном порядке).

//Лучший случай: O(n)(если массив уже отсортирован, в оптимизированной версии).

    //Оптимизация: если добавить флаг - 2 вариант сортировки

//Добавление флага swapped позволяет завершить сортировку досрочно, если на очередной итерации не было ни одного обмена (значит, массив уже упорядочен)